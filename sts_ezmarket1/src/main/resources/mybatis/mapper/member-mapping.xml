<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ezmarket.MemberMapper">
	
	<!-- 로그인 -->
		<!-- 로그인 -->
		<select id="getMember" resultType="memberdto" parameterType="String">
			select m.*,
			b.brand_id, b.brandname, b.brandlogo_url, b.brandlicense_url, b.brand_number, b.brand_status, b.brand_refusal_comment
			from member m 
			left join brand b on m.member_id = b.member_id 
			where username = #{username}
		</select>
		
		<!-- 회원가입 -->
		<insert id="insertMember" parameterType="memberdto">
			insert into member (member_id, username, realname, nickname, password, email, phone, address, join_date) 
			values (#{member_id}, #{username}, #{realname}, #{nickname}, #{password}, #{email, jdbcType=VARCHAR}, #{phone}, #{address}, sysdate)
		</insert>
		
		<!-- 중복확인 -->
		<select id="checkId" resultType="int" parameterType="String"> 
			select count(*) from member where username = #{username}
		</select>
		
		<select id="checkNickname" resultType="int" parameterType="String"> 
			select count(*) from member where nickname = #{nickname}
		</select>
		
		<select id="checkEmail" resultType="int" parameterType="String"> 
			select count(*) from member where email = #{email}
		</select>
		
		<select id="checkPhone" resultType="int" parameterType="String"> 
			select count(*) from member where phone = #{phone}
		</select>
		
		<!-- 아이디 찾기 -->
	    <select id="findIdByEmailOrPhone" resultType="memberdto" parameterType="String">
	        select username from member where email = #{emailOrPhone} OR phone = #{emailOrPhone}
	    </select>
	    
	    <!-- 비밀번호 찾기 -->
	    <select id="findPwByUsernameAndRealnameAndEmailAndPhone" resultType="memberdto" parameterType="map">
	        select * from member where username = #{username} and realname = #{realname} and email = #{email} and phone = #{phone}
	    </select>
	    
	    <!-- 비밀번호 재설정 -->
	    <update id="resetPwOnly" parameterType="map">
	        update member set password = #{newPassword} where username = #{username}
	    </update>
	     
	<!--  내정보 -->
		<!-- 회원 정보 수정 -->
		<update id="modifyInfo" parameterType="memberdto">
			update member set password = #{password}, nickname = #{nickname}, phone = #{phone}, address = #{address}, update_date = sysdate where username = #{username}
		</update>
		
		<!-- 회원 탈퇴 -->
		<update id="resignMember" parameterType="memberdto">
			update member set member_status = '탈퇴', member_kick_comment = '탈퇴한 회원입니다.', kick_date = sysdate where username = #{username}
		</update>
	
	<!--  판매자 -->
		<!-- 판매자 신청 -->
		<insert id="sellApplicationSubmit" parameterType="memberdto">
			insert into brand (brand_id, member_id, brandname, brand_number, brand_join_date, brand_status, brandlicense_url, brandlogo_url) values (#{brand_id}, #{member_id}, #{brandname}, #{brand_number}, sysdate, '검토 중', #{brandlicense_url}, #{brandlogo_url})
		</insert>
		
		<!-- 중복확인 -->
		<select id="checkBrandNumber" resultType="int" parameterType="String"> 
			select count(*) from brand where brand_number = #{brand_number}
		</select>
		
		<!-- 판매자 정보 수정 -->
		<update id="modifySeller" parameterType="memberdto">
			update brand set brandname = #{brandname}, brandlogo_url = #{brandlogo_url}, brand_update_date = sysdate where brand_id = #{brand_id}
		</update>
		
	<!--  관리자 -->
		<!-- 회원 목록 가져오기 -->
		<select id="getAllUsersMember" resultType="memberdto">
			select member_id, userauthor, username, realname, nickname, email, phone, address, member_status, member_kick_comment, join_date, update_date from member
		</select>
		
		<!-- 회원 강퇴 -->
		<update id="kickMember" parameterType="memberdto">
			update member set member_status = '강퇴', member_kick_comment = #{member_kick_comment}, kick_date = sysdate where member_id = #{member_id}
		</update>
		
		<!-- 회원 복구 -->
		<update id="restoreMember" parameterType="memberdto">
			update member set member_status = '정상', member_kick_comment = null, kick_date = null where member_id = #{member_id}
		</update>
		
		<!-- 판매자 목록 가져오기 -->
		<select id="getAllBrandsMember" resultType="memberdto">
			select b.brand_id, b.brandname, b.brandlogo_url, b.brand_number, b.brandlicense_url, b.brand_status, b.brand_refusal_comment, b.brand_join_date, b.brand_update_date, m.username, m.realname
			from brand b 
			join member m on b.member_id = m.member_id
		</select>
		
		<!-- 판매자 신청 수락 -->
		<update id="sellApplicationAccept" parameterType="long">
			update brand set brand_status = '승인' where brand_id = #{brand_id}
		</update>
		
		<update id="sellApplicationAcceptAuthor" parameterType="long">
			update member m 
			set m.userauthor = 2
			where m.member_id in (
				select b.member_id
				from brand b
				where b.brand_id = #{brand_id}
				and b.member_id = m.member_id
			)
		</update>
	
		<!-- 판매자 신청 거절 -->
		<update id="sellApplicationRefuse" parameterType="memberdto">
			update brand set brand_status = '거절', brand_refusal_comment = #{brand_refusal_comment} where brand_id = #{brand_id}
		</update>
		
		<update id="sellApplicationRefuseAuthor" parameterType="long">
			update member m 
			set m.userauthor = 1
			where m.member_id in (
				select b.member_id
				from brand b
				where b.brand_id = #{brand_id}
				and b.member_id = m.member_id
			)
		</update>
	
	<resultMap type="ezmarket.BrandDTO" id="brand">
		<id property="member_id" column="member_id"/>
		<result property="brand_id" column="brand_id"/>
		
		<association property="memberdto" javaType="ezmarket.MemberDTO">
			<result property="member_id" column="member_id"/>
		</association>
	</resultMap>
	<select id="getBrand" resultMap="brand">
		select br.brand_id
		from brand br join member m on br.member_id = m.member_id
		where br.member_id = #{member_id}
	</select>
	
	<select id="getBrandAddr" resultType="memberdto">
	select m.address, b.brand_id from brand b join member m on b.member_id = m.member_id where b.brand_status = '승인'
	</select>
	
</mapper>
